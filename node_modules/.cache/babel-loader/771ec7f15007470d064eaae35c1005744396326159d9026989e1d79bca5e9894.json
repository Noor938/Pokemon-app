{"ast":null,"code":"import { gql } from \"@apollo/client\";\nexport const GET_POKEMON_DETAIL = gql`\n  query GetPokemon(\n    $name: PokemonEnum!\n    $offsetFlavorTexts: Int\n    $takeFlavorTexts: Int\n    $reverseFlavorTexts: Boolean\n  ) {\n    getPokemon(\n      pokemon: $name\n      offsetFlavorTexts: $offsetFlavorTexts\n      takeFlavorTexts: $takeFlavorTexts\n      reverseFlavorTexts: $reverseFlavorTexts\n    ) {\n      ...FullData\n    }\n  }\n\n  fragment GenerationalPokemonLearnsetFragment on GenerationalPokemonLearnset {\n    generation3 {\n      ...PokemonLearnsetFragment\n    }\n    generation4 {\n      ...PokemonLearnsetFragment\n    }\n    generation5 {\n      ...PokemonLearnsetFragment\n    }\n    generation6 {\n      ...PokemonLearnsetFragment\n    }\n    generation7 {\n      ...PokemonLearnsetFragment\n    }\n    generation8 {\n      ...PokemonLearnsetFragment\n    }\n  }\n\n  fragment PokemonLearnsetFragment on PokemonLearnset {\n    dreamworldMoves {\n      ...LearnsetMoveFragment\n    }\n    eggMoves {\n      ...LearnsetMoveFragment\n    }\n    eventMoves {\n      ...LearnsetMoveFragment\n    }\n    tmMoves {\n      ...LearnsetMoveFragment\n    }\n    tutorMoves {\n      ...LearnsetMoveFragment\n    }\n    virtualTransferMoves {\n      ...LearnsetMoveFragment\n    }\n    levelUpMoves {\n      ...LearnsetLevelUpMoveFragment\n    }\n  }\n\n  fragment LearnsetLevelUpMoveFragment on LearnsetLevelUpMove {\n    generation\n    level\n    move {\n      ...MoveFragment\n    }\n  }\n\n  fragment MoveFragment on Move {\n    key\n    accuracy\n    basePower\n    bulbapediaPage\n    category\n    contestType\n    desc\n    isFieldMove\n    isGMax\n    isNonstandard\n    isZ\n    maxMovePower\n    name\n    pp\n    priority\n    serebiiPage\n    shortDesc\n    smogonPage\n    target\n    type\n    zMovePower\n  }\n\n  fragment LearnsetMoveFragment on LearnsetMove {\n    generation\n    move {\n      ...MoveFragment\n    }\n  }\n\n  fragment AbilitiesFragment on Abilities {\n    first {\n      ...AbilityFragment\n    }\n    second {\n      ...AbilityFragment\n    }\n    hidden {\n      ...AbilityFragment\n    }\n    special {\n      ...AbilityFragment\n    }\n  }\n\n  fragment AbilityFragment on Ability {\n    name\n    key\n    bulbapediaPage\n    desc\n    isFieldAbility\n    serebiiPage\n    shortDesc\n    smogonPage\n    pokemonThatHaveThisAbility {\n      ...FullDataFragmentWithoutNested\n      learnsets {\n        ...GenerationalPokemonLearnsetFragment\n      }\n    }\n  }\n\n  fragment EvYieldsFragment on EvYields {\n    hp\n    attack\n    defense\n    specialattack\n    specialdefense\n    speed\n  }\n\n  fragment FlavorFragment on Flavor {\n    flavor\n    game\n  }\n\n  fragment GenderFragment on Gender {\n    female\n    male\n  }\n\n  fragment PokemonTypeFragment on PokemonType {\n    name\n    matchup {\n      attacking {\n        doubleEffectiveTypes\n        doubleResistedTypes\n        effectiveTypes\n        effectlessTypes\n        normalTypes\n        resistedTypes\n      }\n      defending {\n        doubleEffectiveTypes\n        doubleResistedTypes\n        effectiveTypes\n        effectlessTypes\n        normalTypes\n        resistedTypes\n      }\n    }\n  }\n\n  fragment StatsFragment on Stats {\n    hp\n    attack\n    defense\n    specialattack\n    specialdefense\n    speed\n  }\n\n  fragment CatchRateFragment on CatchRate {\n    base\n    percentageWithOrdinaryPokeballAtFullHealth\n  }\n\n  fragment FullDataFragmentWithoutNested on Pokemon {\n    key\n    eggGroups\n    evYields {\n      ...EvYieldsFragment\n    }\n    evolutionLevel\n    flavorTexts {\n      ...FlavorFragment\n    }\n    forme\n    formeLetter\n    gender {\n      ...GenderFragment\n    }\n    height\n    isEggObtainable\n    backSprite\n    levellingRate\n    maximumHatchTime\n    minimumHatchTime\n    num\n    otherFormes\n    serebiiPage\n    shinyBackSprite\n    shinySprite\n    smogonPage\n    baseForme\n    smogonTier\n    species\n    sprite\n    types {\n      ...PokemonTypeFragment\n    }\n    baseSpecies\n    baseStats {\n      ...StatsFragment\n    }\n    baseStatsTotal\n    bulbapediaPage\n    catchRate {\n      ...CatchRateFragment\n    }\n    classification\n    respelling\n    ipa\n    color\n    cosmeticFormes\n    cry\n    weight\n  }\n\n  fragment FullDataFragment on Pokemon {\n    abilities {\n      ...AbilitiesFragment\n    }\n    learnsets {\n      ...GenerationalPokemonLearnsetFragment\n    }\n    ...FullDataFragmentWithoutNested\n  }\n\n  fragment FullData on Pokemon {\n    ...FullDataFragment\n    evolutions {\n      ...FullDataFragment\n      evolutions {\n        ...FullDataFragment\n      }\n      preevolutions {\n        ...FullDataFragment\n      }\n    }\n    preevolutions {\n      ...FullDataFragment\n      evolutions {\n        ...FullDataFragment\n      }\n      preevolutions {\n        ...FullDataFragment\n      }\n    }\n  }\n`;\n// query for all pokemon list \nexport const GET_POKEMONS = gql`\n  query getAllPokemon($take: Int) {\n    getAllPokemon(take: $take) {\n      species\n      sprite\n      key\n    }\n  }\n`;","map":{"version":3,"names":["gql","GET_POKEMON_DETAIL","GET_POKEMONS"],"sources":["C:/Users/LENOVO P53 9GEN/Desktop/Pokemon-app/src/graphql/queries/pokemon.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_POKEMON_DETAIL = gql`\n  query GetPokemon(\n    $name: PokemonEnum!\n    $offsetFlavorTexts: Int\n    $takeFlavorTexts: Int\n    $reverseFlavorTexts: Boolean\n  ) {\n    getPokemon(\n      pokemon: $name\n      offsetFlavorTexts: $offsetFlavorTexts\n      takeFlavorTexts: $takeFlavorTexts\n      reverseFlavorTexts: $reverseFlavorTexts\n    ) {\n      ...FullData\n    }\n  }\n\n  fragment GenerationalPokemonLearnsetFragment on GenerationalPokemonLearnset {\n    generation3 {\n      ...PokemonLearnsetFragment\n    }\n    generation4 {\n      ...PokemonLearnsetFragment\n    }\n    generation5 {\n      ...PokemonLearnsetFragment\n    }\n    generation6 {\n      ...PokemonLearnsetFragment\n    }\n    generation7 {\n      ...PokemonLearnsetFragment\n    }\n    generation8 {\n      ...PokemonLearnsetFragment\n    }\n  }\n\n  fragment PokemonLearnsetFragment on PokemonLearnset {\n    dreamworldMoves {\n      ...LearnsetMoveFragment\n    }\n    eggMoves {\n      ...LearnsetMoveFragment\n    }\n    eventMoves {\n      ...LearnsetMoveFragment\n    }\n    tmMoves {\n      ...LearnsetMoveFragment\n    }\n    tutorMoves {\n      ...LearnsetMoveFragment\n    }\n    virtualTransferMoves {\n      ...LearnsetMoveFragment\n    }\n    levelUpMoves {\n      ...LearnsetLevelUpMoveFragment\n    }\n  }\n\n  fragment LearnsetLevelUpMoveFragment on LearnsetLevelUpMove {\n    generation\n    level\n    move {\n      ...MoveFragment\n    }\n  }\n\n  fragment MoveFragment on Move {\n    key\n    accuracy\n    basePower\n    bulbapediaPage\n    category\n    contestType\n    desc\n    isFieldMove\n    isGMax\n    isNonstandard\n    isZ\n    maxMovePower\n    name\n    pp\n    priority\n    serebiiPage\n    shortDesc\n    smogonPage\n    target\n    type\n    zMovePower\n  }\n\n  fragment LearnsetMoveFragment on LearnsetMove {\n    generation\n    move {\n      ...MoveFragment\n    }\n  }\n\n  fragment AbilitiesFragment on Abilities {\n    first {\n      ...AbilityFragment\n    }\n    second {\n      ...AbilityFragment\n    }\n    hidden {\n      ...AbilityFragment\n    }\n    special {\n      ...AbilityFragment\n    }\n  }\n\n  fragment AbilityFragment on Ability {\n    name\n    key\n    bulbapediaPage\n    desc\n    isFieldAbility\n    serebiiPage\n    shortDesc\n    smogonPage\n    pokemonThatHaveThisAbility {\n      ...FullDataFragmentWithoutNested\n      learnsets {\n        ...GenerationalPokemonLearnsetFragment\n      }\n    }\n  }\n\n  fragment EvYieldsFragment on EvYields {\n    hp\n    attack\n    defense\n    specialattack\n    specialdefense\n    speed\n  }\n\n  fragment FlavorFragment on Flavor {\n    flavor\n    game\n  }\n\n  fragment GenderFragment on Gender {\n    female\n    male\n  }\n\n  fragment PokemonTypeFragment on PokemonType {\n    name\n    matchup {\n      attacking {\n        doubleEffectiveTypes\n        doubleResistedTypes\n        effectiveTypes\n        effectlessTypes\n        normalTypes\n        resistedTypes\n      }\n      defending {\n        doubleEffectiveTypes\n        doubleResistedTypes\n        effectiveTypes\n        effectlessTypes\n        normalTypes\n        resistedTypes\n      }\n    }\n  }\n\n  fragment StatsFragment on Stats {\n    hp\n    attack\n    defense\n    specialattack\n    specialdefense\n    speed\n  }\n\n  fragment CatchRateFragment on CatchRate {\n    base\n    percentageWithOrdinaryPokeballAtFullHealth\n  }\n\n  fragment FullDataFragmentWithoutNested on Pokemon {\n    key\n    eggGroups\n    evYields {\n      ...EvYieldsFragment\n    }\n    evolutionLevel\n    flavorTexts {\n      ...FlavorFragment\n    }\n    forme\n    formeLetter\n    gender {\n      ...GenderFragment\n    }\n    height\n    isEggObtainable\n    backSprite\n    levellingRate\n    maximumHatchTime\n    minimumHatchTime\n    num\n    otherFormes\n    serebiiPage\n    shinyBackSprite\n    shinySprite\n    smogonPage\n    baseForme\n    smogonTier\n    species\n    sprite\n    types {\n      ...PokemonTypeFragment\n    }\n    baseSpecies\n    baseStats {\n      ...StatsFragment\n    }\n    baseStatsTotal\n    bulbapediaPage\n    catchRate {\n      ...CatchRateFragment\n    }\n    classification\n    respelling\n    ipa\n    color\n    cosmeticFormes\n    cry\n    weight\n  }\n\n  fragment FullDataFragment on Pokemon {\n    abilities {\n      ...AbilitiesFragment\n    }\n    learnsets {\n      ...GenerationalPokemonLearnsetFragment\n    }\n    ...FullDataFragmentWithoutNested\n  }\n\n  fragment FullData on Pokemon {\n    ...FullDataFragment\n    evolutions {\n      ...FullDataFragment\n      evolutions {\n        ...FullDataFragment\n      }\n      preevolutions {\n        ...FullDataFragment\n      }\n    }\n    preevolutions {\n      ...FullDataFragment\n      evolutions {\n        ...FullDataFragment\n      }\n      preevolutions {\n        ...FullDataFragment\n      }\n    }\n  }\n`;\n// query for all pokemon list \nexport const GET_POKEMONS = gql`\n  query getAllPokemon($take: Int) {\n    getAllPokemon(take: $take) {\n      species\n      sprite\n      key\n    }\n  }\n`;\n\n\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,MAAMC,kBAAkB,GAAGD,GAAG;AACrignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}